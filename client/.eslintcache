[{"C:\\Users\\Abdulla\\apps\\CTF\\client\\src\\reportWebVitals.js":"1","C:\\Users\\Abdulla\\apps\\CTF\\client\\src\\App.js":"2","C:\\Users\\Abdulla\\apps\\CTF\\client\\src\\Arbitrator.js":"3","C:\\Users\\Abdulla\\apps\\CTF\\client\\src\\Bets.js":"4","C:\\Users\\Abdulla\\apps\\CTF\\client\\src\\CreateMarket.js":"5","C:\\Users\\Abdulla\\apps\\CTF\\client\\src\\generate-meta-evidence.js":"6","C:\\Users\\Abdulla\\apps\\CTF\\client\\src\\ipfs-publish.js":"7"},{"size":362,"mtime":1607899067907,"results":"8","hashOfConfig":"9"},{"size":9873,"mtime":1607899353249,"results":"10","hashOfConfig":"9"},{"size":2867,"mtime":1607899439752,"results":"11","hashOfConfig":"9"},{"size":6528,"mtime":1607899447807,"results":"12","hashOfConfig":"9"},{"size":4925,"mtime":1607899454576,"results":"13","hashOfConfig":"9"},{"size":337,"mtime":1607899478887,"results":"14","hashOfConfig":"9"},{"size":898,"mtime":1607899484951,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1qmijev",{"filePath":"18","messages":"19","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Abdulla\\apps\\CTF\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Abdulla\\apps\\CTF\\client\\src\\App.js",["33","34","35","36","37","38","39","40","41","42"],"import React, {Component} from 'react';\nimport AppBar from '@material-ui/core/AppBar'\nimport Typography from '@material-ui/core/Typography'\nimport Grid from '@material-ui/core/Grid'\nimport {CardMedia} from '@material-ui/core'\n\nimport CreateMarket from './CreateMarket'\nimport Bets from './Bets'\nimport Arbitrator from './Arbitrator'\n\nimport Web3 from 'web3';\nimport EventContract from './SCEvent.json'\nimport ArbitratorContract from './SimpleCentralizedArbitrator.json'\nimport FactoryContract from './SCFactory.json'\n\nimport ipfsPublish from './ipfs-publish.js'\nconst ipfs = require(\"nano-ipfs-store\").at(\"https://ipfs.infura.io:5001\");\n\nconst enc = new TextEncoder()\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state ={\n      account: '',\n      event: [],\n      arbitrator: null,\n      factory: null,\n      price: 0,\n      matchdata: [],\n      endTime: 0,\n      resultTime: 0,\n      loading: true,\n      eventData: [],\n      disputeData: [],\n      numberOfEvents: 0,\n      openBet: false,\n      openBetBet: 0,\n      openBetOption: 1,\n      quotedPrice: 0,\n      quotedAmount: 0,\n      openSetOutcome: false,\n      openSetOutcomeBet: 0,\n      web3: null\n    }\n    this.addEventData = this.addEventData.bind(this)\n  }\n\n  handleCloseBet = (e) => {\n    this.setState({openBet: false})\n    this.setState({openBetBet: 0})\n    this.setState({openBetOption: 1})\n  }\n\n  handleOpenBet = (e,b,o) => {\n    this.setState({openBet: true})\n    this.setState({openBetBet: b})\n    this.setState({openBetOption: o})\n  }\n\n  handleCloseSetOutcome = (e) => {\n    this.setState({openSetOutcome: false})\n  }\n\n  handleOpenSetOutcome = (e,b) => {\n    this.setState({openSetOutcome: true})\n    this.setState({openSetOutcomeBet: b})\n  }\n\n  handleChangePurchaseSize = (e,bet) => {\n    if(e.target.value == 0) {\n      this.setState({quotedPrice: 0})\n    }\n    this.state.event[this.state.openBetBet].methods.price(this.state.openBetOption,new this.state.web3.utils.BN(e.target.value).shln(64)).call().then((res) => {\n      this.setState({quotedPrice: res/1000000})\n    })\n    this.setState({quotedAmount: e.target.value})\n  }\n\n  async componentDidMount() {\n    await this.loadWeb3()\n    await this.loadData()\n    this.listenForEvents()\n  }\n\n  async loadWeb3() {\n    if(window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    } else {\n      window.alert('Non-ethereum browser detected. Download metamask!')\n    }\n  }\n\n  handleCreateMarket = (data,numOptions,endTime,resultTime) => {\n    console.log('Attempting to add event: ',numOptions,endTime,resultTime,data)\n    ipfs.add(enc.encode(JSON.stringify(data))).then((ipfsHash) => {\n      console.log('/ipfs/'+ipfsHash)\n      this.state.factory.methods.createMarket(numOptions,endTime,resultTime,'/ipfs/'+ipfsHash).send({from: this.state.account})\n      .once('receipt', ((receipt) => {\n        try {\n          console.log('Market successfully created!!')\n        } catch (e) {\n          console.log('Error ',e)\n        }\n      }))\n    })\n\n  }\n\n  handleSetOutcome = (e,x) => {\n    console.log(`Attempting to set outcome [${x}] for event [${this.state.openSetOutcomeBet}]`)\n    try{\n      this.state.event[this.state.openSetOutcomeBet].methods.setOutcome(x).send({from: this.state.account})\n      .once('receipt', ((receipt) => {\n        console.log('Outcome has been set')\n        this.setState({openSetOutcome: false})\n      }))\n    } catch (err) {\n      console.log('Error', err)\n    }\n  }\n\n  handlePlaceBet = (e) => {\n    console.log(`Attempting to buy ${this.state.quotedAmount} shares on option [${this.state.openBetOption}] on event: ${this.state.eventData[this.state.openBetBet].title} at address ${this.state.event[this.state.openBetBet]._address}`)\n    try{\n      this.state.event[this.state.openBetBet].methods.buyshares(this.state.openBetOption,new this.state.web3.utils.BN(this.state.quotedAmount).shln(64)).send({from: this.state.account})\n      .once('receipt', ((receipt) => {\n        console.log('Placed Bet!')\n        this.setState({openBet: false})\n      }))\n    } catch (err) {\n      console.log('Error', err)\n    }\n  }\n\n  handleDispute = (e,b) => {\n    try{\n      this.state.event[b].methods.disputeOutcome().send({from: this.state.account, value: 1000000000000000})\n      .once('receipt', ((receipt) => {\n        console.log('Dispute sent to KLEROS')\n        this.setState({openBet: false})\n      }))\n    } catch (err) {\n      console.log('Error', err)\n    }\n  }\n\n  handleDisputeOutcome = (e,b,o) => {\n    try{\n      this.state.arbitrator.methods.rule(b,o).send({from: this.state.account})\n      .once('receipt', ((receipt) => {\n        console.log('KLEROS has made the judgement')\n      }))\n    } catch (err) {\n      console.log('Error', err)\n    }\n  }\n\n  addEventData (address,title,description,question,options,endTime,resultTime, outcome, price, balances, state) {\n    var obj = {\n      address: address,\n      title: title,\n      description: description,\n      question: question,\n      options: options,\n      endTime: endTime,\n      resultTime: resultTime,\n      outcome: outcome,\n      price: price,\n      balances: balances,\n      state: state\n    }\n    this.setState({eventData: [...this.state.eventData, obj]})\n  }\n\n  getEventData(address) {\n    this.state.eventData.map((ev,key) => {\n      if(ev.address == address) {\n        return 'test'\n      } else {\n      }\n    })\n  }\n\n  addDisputeData(data) {\n    var obj = {\n      arbitrated: data[0],\n      choices: data[1],\n      ruling: data[2],\n      status: data[3],\n      eventData: null\n    }\n    this.setState({disputeData: [...this.state.disputeData, Object.keys(obj).map((key) => obj[key])]})\n  }\n\n  async loadData() {\n    const web3 = window.web3\n    const accounts = await web3.eth.getAccounts()\n    this.setState({account: accounts[0]})\n\n    this.setState({web3})\n\n    const factory = new web3.eth.Contract(FactoryContract.abi, '0xCC484690bfeA257DD50f7a6865D0793d16Ac3E2A')\n    this.setState({factory})\n    const numEvents = await factory.methods.getNumberOfMarkets().call()\n    this.setState({numberOfEvents: numEvents})\n    const arbitrator = new web3.eth.Contract(ArbitratorContract.abi,'0xaededC9A349B19508cdAeD4C6F8CF244413260E7')\n    this.setState({arbitrator})\n\n    const numArbs = await arbitrator.methods.getNumberOfDisputes().call()\n    for(var k=0;k<numArbs;k++) {\n      var arb_data = await arbitrator.methods.getDisputeData(k).call()\n      .then((response) => {\n        this.addDisputeData(response)\n      })\n\n    }\n\n    for(var i=0;i<numEvents;i++) {\n      var addr = await factory.methods.getMarket(i).call()\n      var ev = new web3.eth.Contract(EventContract.abi, addr)\n      this.setState({event: [...this.state.event,ev]})\n\n      var numOptions = await ev.methods.numOfOutcomes().call()\n      var price = []\n      var balances = []\n      for (var j=0; j<numOptions; j++) {\n        price[j] = (await ev.methods.price(j+1,new web3.utils.BN('18446744073709551616')).call()/1000000).toFixed(2)\n        balances[j] = (await ev.methods.getBalanceOf(j+1,this.state.account).call())/(2**64)\n      }\n\n      var outcome = await ev.methods.getOutcome().call()\n      var endTime = await ev.methods.endTimestamp().call()\n      var resultTime = await ev.methods.resultTimestamp().call()\n\n      var state = await ev.methods.status().call()\n\n      var metaevidence\n      await ev.getPastEvents('MetaEvidence', {fromBlock: 0, toBlock: 'latest'})\n      .then((evx) => {\n        metaevidence = evx[0].returnValues._evidence;\n        console.log('Loading file: ',metaevidence)\n        var output = fetch('https://gateway.ipfs.io'+metaevidence)\n        .then((response) => response.json())\n        .then((responseJSON) => {\n          this.addEventData(ev._address,responseJSON.title, responseJSON.description, responseJSON.question, responseJSON.rulingOptions.descriptions,endTime,resultTime,outcome,price,balances,state)\n          console.log('Finished loading: ',metaevidence);\n          if(i>=(numEvents-1)) {\n            console.log('loaded all data')\n            this.setState({loading: false})\n          }\n        })\n      })\n    }\n  }\n\n\n  listenForEvents = () => {\n    /*if(this.state.loading == false) {\n    //console.log('address',this.state.event[0].events)\n    this.state.event[0].events.MetaEvidence({}).on('data',(event,error) => {\n      console.log(event,error)\n    })\n  }\n    //contract.DisputeCreate({}).on('data', (event,error) => {})*/\n  }\n\n  render() {\n    if(this.state.loading == false ){\n    return(\n      <React.Fragment>\n      <header>\n        <AppBar position=\"static\" style = {{backgroundColor: \"#ED1C24\"}} >\n          <img style={{ width: \"50%\" }} src=\"supreme_header.png\" />\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\n            Your address: {this.state.account}\n            </Typography>\n            </AppBar>\n      </header>\n    <main>\n    <br/>\n    <Grid container spacing = {3}>\n\n      <Grid item xs={4}>\n        <CreateMarket createMarket={this.handleCreateMarket} state={this.state}/>\n      </Grid>\n      <Grid item xs={4}>\n        <Bets handleDispute={this.handleDispute} handleSetOutcome = {this.handleSetOutcome} handleOpenSetOutcome={this.handleOpenSetOutcome} handleCloseSetOutcome={this.handleCloseSetOutcome} handlePlaceBet={this.handlePlaceBet} handleChangePurchaseSize={this.handleChangePurchaseSize} state={this.state} openSetOutcome={this.state.openSetOutcome} open={this.state.openBet} handleClose={this.handleCloseBet} handleOpen={this.handleOpenBet}/>\n      </Grid>\n      <Grid item xs={4}>\n        <Arbitrator handleDisputeOutcome={this.handleDisputeOutcome} state={this.state}/>\n      </Grid>\n    </Grid>\n    </main>\n    </React.Fragment>\n  )} else {\n    return(\n    <div>\n    loading\n    </div>\n    )\n    }\n  }\n}\n\nexport default App;\n",["43","44"],"C:\\Users\\Abdulla\\apps\\CTF\\client\\src\\Arbitrator.js",["45","46","47","48","49","50","51"],"C:\\Users\\Abdulla\\apps\\CTF\\client\\src\\Bets.js",["52","53","54"],"C:\\Users\\Abdulla\\apps\\CTF\\client\\src\\CreateMarket.js",["55","56"],"C:\\Users\\Abdulla\\apps\\CTF\\client\\src\\generate-meta-evidence.js",["57"],"export default (title,category,description,question,options,optionsDesc,payer) => ({\r\n  category: category,\r\n  title: title,\r\n  description: description,\r\n  question: question,\r\n  rulingOptions: {\r\n    type: 'single-select',\r\n    titles: options,\r\n    descriptions: optionsDesc\r\n  },\r\n  aliases: {\r\n    [payer]: 'Market Maker'\r\n  }\r\n})\r\n","C:\\Users\\Abdulla\\apps\\CTF\\client\\src\\ipfs-publish.js",[],{"ruleId":"58","severity":1,"message":"59","line":5,"column":9,"nodeType":"60","messageId":"61","endLine":5,"endColumn":18},{"ruleId":"58","severity":1,"message":"62","line":16,"column":8,"nodeType":"60","messageId":"61","endLine":16,"endColumn":19},{"ruleId":"63","severity":1,"message":"64","line":72,"column":23,"nodeType":"65","messageId":"66","endLine":72,"endColumn":25},{"ruleId":"67","severity":1,"message":"68","line":181,"column":39,"nodeType":"69","messageId":"70","endLine":181,"endColumn":41},{"ruleId":"63","severity":1,"message":"64","line":182,"column":21,"nodeType":"65","messageId":"66","endLine":182,"endColumn":23},{"ruleId":"58","severity":1,"message":"71","line":216,"column":11,"nodeType":"60","messageId":"61","endLine":216,"endColumn":19},{"ruleId":"72","severity":1,"message":"73","line":244,"column":13,"nodeType":"69","messageId":"74","endLine":257,"endColumn":8},{"ruleId":"58","severity":1,"message":"75","line":247,"column":13,"nodeType":"60","messageId":"61","endLine":247,"endColumn":19},{"ruleId":"63","severity":1,"message":"64","line":273,"column":27,"nodeType":"65","messageId":"66","endLine":273,"endColumn":29},{"ruleId":"76","severity":1,"message":"77","line":278,"column":11,"nodeType":"78","endLine":278,"endColumn":68},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"58","severity":1,"message":"83","line":8,"column":8,"nodeType":"60","messageId":"61","endLine":8,"endColumn":14},{"ruleId":"58","severity":1,"message":"84","line":10,"column":9,"nodeType":"60","messageId":"61","endLine":10,"endColumn":18},{"ruleId":"67","severity":1,"message":"85","line":24,"column":44,"nodeType":"69","messageId":"86","endLine":24,"endColumn":46},{"ruleId":"63","severity":1,"message":"64","line":25,"column":21,"nodeType":"65","messageId":"66","endLine":25,"endColumn":23},{"ruleId":"58","severity":1,"message":"87","line":49,"column":7,"nodeType":"60","messageId":"61","endLine":49,"endColumn":15},{"ruleId":"76","severity":1,"message":"77","line":59,"column":7,"nodeType":"78","endLine":59,"endColumn":65},{"ruleId":"63","severity":1,"message":"64","line":64,"column":50,"nodeType":"65","messageId":"66","endLine":64,"endColumn":52},{"ruleId":"58","severity":1,"message":"88","line":12,"column":8,"nodeType":"60","messageId":"61","endLine":12,"endColumn":19},{"ruleId":"63","severity":1,"message":"64","line":67,"column":14,"nodeType":"65","messageId":"66","endLine":67,"endColumn":16},{"ruleId":"76","severity":1,"message":"77","line":166,"column":7,"nodeType":"78","endLine":166,"endColumn":64},{"ruleId":"58","severity":1,"message":"89","line":3,"column":8,"nodeType":"60","messageId":"61","endLine":3,"endColumn":18},{"ruleId":"76","severity":1,"message":"77","line":94,"column":7,"nodeType":"78","endLine":94,"endColumn":64},{"ruleId":"90","severity":1,"message":"91","line":1,"column":1,"nodeType":"92","endLine":14,"endColumn":3},"no-unused-vars","'CardMedia' is defined but never used.","Identifier","unusedVar","'ipfsPublish' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'arb_data' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'metaevidence', 'metaevidence', 'metaevidence', 'ev', 'endTime', 'resultTime', 'outcome', 'price', 'balances', 'state', 'metaevidence', 'i'.","unsafeRefs","'output' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["93"],"no-negated-in-lhs",["94"],"'Button' is defined but never used.","'PropTypes' is defined but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","'disputes' is assigned a value but never used.","'DialogTitle' is defined but never used.","'Typography' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]